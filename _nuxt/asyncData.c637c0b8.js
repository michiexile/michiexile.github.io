import{m as k,p,q as C,s as B,v as O,x as M,u as z,y as E}from"./entry.6e5e7a6c.js";const H=()=>null;function N(...s){var v,D,_,g,P,w,x,b;const f=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(f);let[r,l,e={}]=s;if(typeof r!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(v=e.server)!=null?v:!0,e.default=(D=e.default)!=null?D:H,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(g=(_=e.lazy)!=null?_:e.defer)!=null?g:!1,e.immediate=(P=e.immediate)!=null?P:!0;const a=k(),d=()=>a.isHydrating?a.payload.data[r]:a.static.data[r],y=()=>d()!==void 0;a._asyncData[r]||(a._asyncData[r]={data:p((b=(x=d())!=null?x:(w=e.default)==null?void 0:w.call(e))!=null?b:null),pending:p(!y()),error:p(a.payload._errors[r]?C(a.payload._errors[r]):null)});const n={...a._asyncData[r]};n.refresh=n.execute=(o={})=>{if(a._asyncDataPromises[r]){if(o.dedupe===!1)return a._asyncDataPromises[r];a._asyncDataPromises[r].cancelled=!0}if(o._initial&&y())return d();n.pending.value=!0;const i=new Promise((t,c)=>{try{t(l(a))}catch(u){c(u)}}).then(t=>{if(i.cancelled)return a._asyncDataPromises[r];e.transform&&(t=e.transform(t)),e.pick&&(t=R(t,e.pick)),n.data.value=t,n.error.value=null}).catch(t=>{var c,u;if(i.cancelled)return a._asyncDataPromises[r];n.error.value=t,n.data.value=z((u=(c=e.default)==null?void 0:c.call(e))!=null?u:null)}).finally(()=>{i.cancelled||(n.pending.value=!1,a.payload.data[r]=n.data.value,n.error.value&&(a.payload._errors[r]=C(n.error.value)),delete a._asyncDataPromises[r])});return a._asyncDataPromises[r]=i,a._asyncDataPromises[r]};const h=()=>n.refresh({_initial:!0}),A=e.server!==!1&&a.payload.serverRendered;{const o=E();if(o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const t=o._nuxtOnBeforeMountCbs;o&&(B(()=>{t.forEach(c=>{c()}),t.splice(0,t.length)}),O(()=>t.splice(0,t.length)))}A&&a.isHydrating&&y()?n.pending.value=!1:o&&(a.payload.serverRendered&&a.isHydrating||e.lazy)&&e.immediate?o._nuxtOnBeforeMountCbs.push(h):e.immediate&&h(),e.watch&&M(e.watch,()=>n.refresh());const i=a.hook("app:data:refresh",t=>{if(!t||t.includes(r))return n.refresh()});o&&O(i)}const m=Promise.resolve(a._asyncDataPromises[r]).then(()=>n);return Object.assign(m,n),m}async function S(s){const f=s?Array.isArray(s)?s:[s]:void 0;await k().hooks.callHookParallel("app:data:refresh",f)}function R(s,f){const r={};for(const l of f)r[l]=s[l];return r}export{S as r,N as u};
